
public class Algo3_서울_8반_정덕주 {
	
	// 1. 피보나치 java code
	static int fibo(int n) {
		if (n == 1 || n == 2) return 1;
		return fibo(n-1) + fibo(n-2);
	}
	
	
	// 2. 시간복잡도 계산방법
	/* 위 재귀 함수는 O(2^N)의 시간복잡도를 가진다.
	 * 
	 * 1. 단순 풀이
	 * 시간복잡도상으로 f(N), f(N-1), f(N-2)는 차이가 없다.
	 * 따라서 시간복잡도 상으로 f(N)은 2 * f(N-1) 이라고 볼 수 있으며 
	 * f(N)는 2^(N-2) * f(2)로 f(N)의 시간복잡도는 O(N^2)이다.
	 * 
	 * 2. 점화식 풀이
	 * f(N) = f(N-1) + f(N-2), f(1) = f(2) = 1;
	 * f(N) = f(1) * f(N-1) + f(2) * f(N-2)
	 * 		= f(2) * f(N-2) + f(3) * f(N-3)
	 * 		= f(3) * f(N-3) + f(4) * f(N-4)
	 * 		= f(k) * f(N-k) + f(k+1) * f (N-(k+1));
	 * 		→ 2 * f(N/2)^2 (when k = N/2)
	 * 		N이 2배 늘어날 때마다 제곱배로 커지기 때문에 O(2^N)의 시간복잡도를 가진다는 것을 알 수 있다.
	 * 
	 * */
	
}
